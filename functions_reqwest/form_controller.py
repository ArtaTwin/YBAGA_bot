from telebot   import TeleBot, types, apihelper

import secret
from .handlers.audience_module import Audience
from .handlers.reporter_error import report_error

__all__ = ['form', 'callback_inline']


bot = TeleBot(secret.TOKEN)
audience = Audience(r"data/audience.json")

def markup_generator(sub_id):
    markup = types.InlineKeyboardMarkup()
    audience.reload()
    for i, SubscriptionsOfSubId in enumerate(audience.get_SubscriptionsOfSubId(sub_id)):
        state, subscription_is_available = SubscriptionsOfSubId
        markup.add(
            types.InlineKeyboardButton(
                state+(" ‚úÖ" if subscription_is_available else ""),
                callback_data=str(
                    (i, subscription_is_available, sub_id)
                )
            )
        )
    #phoro_subscription = sub_id in audience["send map"]
    #markup.add(types.InlineKeyboardButton("üó∫ –ù–∞–¥—Å–∏–ª–∞—Ç–∏ –º–∞–ø—É "+ ('‚úÖ' if phoro_subscription else ''), callback_data=str(("M", phoro_subscription, sub_id)) ))
    markup.add(types.InlineKeyboardButton("–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚öôÔ∏è", callback_data=str(("C", 0, sub_id)) )) #save and close
    return markup

def uncustomizer_chek(chat_id, user_id):
    if chat_id == user_id: #chat.type  == "private"
        return False
    else:
        return not (
            user_id in map(
                lambda admin: admin.user.id,
                bot.get_chat_administrators(chat_id)
            )
            or
            user_id == 1087968824 # anonymous id = 1087968824. Additional information: https://t.me/GroupAnonymousBot
        )


def form(message, security_level=None):
    if uncustomizer_chek(message.chat.id, message.from_user.id):
        bot.send_message(message.chat.id,
            '–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –∞–±–æ –≤—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ –º–æ–∂–µ —Ç—ñ–ª—å–∫–∏ <b>–∞–≤—Ç–æ—Ä –≥—Ä—É–ø–∏</b> –∞–±–æ <b>–∞–¥–º—ñ–Ω—ñc—Ç—Ä–∞—Ç–æ—Ä</b>. –Ü –±–æ—Ç –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
            parse_mode='html'
        )
        return

    if message.reply_to_message:
        info_about_replying_chat = message.reply_to_message.forward_from_chat

        if info_about_replying_chat == None or info_about_replying_chat.type != 'channel':
            bot.send_message(
                message.chat.id,
                "–ù–∞–ª–∞—à—Ç–æ–≤—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç–∞–∫–∏–º —á–∏–Ω–æ–º –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª—ñ–≤\n<b><a href='https://t.me/SupYb/24'>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–∞–Ω–∞–ª—ñ–≤</a></b>",
                parse_mode='html'
            )
            return

        try:
            bot.get_chat(info_about_replying_chat.id)
        except apihelper.ApiTelegramException:
            bot.send_message(
                message.chat.id,
                "–ë–æ—Ç –Ω–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É –∫–∞–Ω–∞–ª—ñ\n<b><a href='https://t.me/SupYb/24'>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–∞–Ω–∞–ª—ñ–≤</a></b>",
                parse_mode='html'
            )
            return

        if uncustomizer_chek(info_about_replying_chat.id, message.from_user.id):
            bot.send_message(
                message.chat.id,
                "–í–∏ –Ω–µ —î –∞–¥–º—ñ–Ω—Å—Ç–∞—Ä—Ç–æ—Ä–æ–º —Ü—å–æ–≥–æ –∫–∞–Ω–∞–ª—É\n<b><a href='https://t.me/SupYb/24'>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–∞–Ω–∞–ª—ñ–≤</a></b>",
                parse_mode='html'
            )
            return

        bot.reply_to(
            message.reply_to_message,
            f'–ù–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –∫–∞–Ω–∞–ª—É \'<b>{info_about_replying_chat.title}</b>\', –∫–æ–ª–∏ —Ç—Ä–∏–≤–æ–≥–∞ –±—É–¥–µ –≤:',
            parse_mode='html',
            reply_markup=markup_generator(info_about_replying_chat.id)
        )
    else:
        bot.send_message(message.chat.id, '–ù–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ —Ç—Ä–∏–≤–æ–≥–∞ –±—É–¥–µ –≤:', reply_markup=markup_generator(message.chat.id))

def callback_form(call):
    try:
        if uncustomizer_chek(call.message.chat.id, call.from_user.id):
            bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–í–∑–∞—î–º–æ–¥—ñ—è—Ç–∏ –∑ —Ü—ñ—î—é —Ñ–æ—Ä–º–æ—é –º–æ–∂–µ —Ç—ñ–ª—å–∫–∏ –∞–≤—Ç–æ—Ä –≥—Ä—É–ø–∏ –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Ç—Ä–∞—Ç–æ—Ä")
            time.sleep(1)
            return

        global audience
        code, subscription_is_available, sub_id = eval(call.data)

        if isinstance(code, int):
            cmrk = call.message.reply_markup.keyboard[code][0] #OPTIMIZE: link. But I cannot create a link by cmrk.text
            if subscription_is_available:
                cmrk.text = cmrk.text[:-2] # state - ???
                audience.del_SubId(cmrk.text, sub_id)
            else:
                audience.add_SubId(cmrk.text, sub_id)
                cmrk.text += " ‚úÖ"

            cmrk.callback_data= str(
                (code, not subscription_is_available, sub_id)
            )

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ù–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ —Ç—Ä–∏–≤–æ–≥–∞ –±—É–¥–µ —É:", reply_markup=call.message.reply_markup)
            return

        elif code=="C": #close
            audience.save()
            subscriptions_of_user = audience.find_SubId(sub_id)

            if subscriptions_of_user:
                str_subscriptions_of_user = "\n".join(
                    [
                        f" {k}. {state}"
                        for k, state in enumerate(subscriptions_of_user,start=1)
                    ]
                )
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                text="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏, –∫–æ–ª–∏ –∑–º—ñ–Ω—é–≤–∞—Ç–∏–º–µ—Ç—å—Å—è —Å–∏—Ç—É–∞—Ü—ñ—è –≤:\n"+str_subscriptions_of_user,
                reply_markup=None)
            else:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                text="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏",
                reply_markup=None)
            return

        else:
            raise ValueError(f"Unidentified value: {code=}")

    except Exception as e:
        report_error(repr(e))
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, '–í—ñ–¥–±—É–≤—Å—è –∑–±—ñ–π.\n–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É, –±—É–¥—å –ª–∞—Å–∫–∞')
